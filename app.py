import streamlit as st
from streamlit_star_rating import st_star_rating
import io
import pdfplumber
from openai import OpenAI as oai
from dotenv import load_dotenv
import os
from langchain_core.prompts import PromptTemplate
import json
import prompts.all_prompts as custom_prompts

load_dotenv()
org_id = os.getenv("ORG_ID")
oai_key = os.getenv("OAI_KEY")
oai_client = oai(api_key=oai_key, organization=org_id)

MAX_RETRY = 3

resume_prompt_template = PromptTemplate.from_template(custom_prompts.resume_prompt_template_str)
job_prompt_template = PromptTemplate.from_template(custom_prompts.job_prompt_template_str)
comparison_prompt_template = PromptTemplate.from_template(custom_prompts.comparison_prompt_template_str)

def get_response(prompt):
    """
    Get a response from the OpenAI chatbot model.

    Args:
        prompt (str): The user's prompt or message.

    Returns:
        str: The response generated by the chatbot model.
    """
    response = oai_client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        # model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        response_format={"type": "json_object"},
        temperature=0,
    )
    return response.choices[0].message.content


def check_length():
    text = st.session_state["job_description"]
    if len(text) < 300:
        st.warning(
            "Job description is too short! Please provide a detailed description which is at least 300 characters.",
            icon="⚠️",
        )


def analysis(resume: str, job_description: str):
    """
    Analyzes the resume and job description to compare the applicant's qualifications with the job requirements.

    Args:
        resume (str): The uploaded resume in string format.
        job_description (str): The job description in string format.

    Returns:
        str: The comparison response indicating the match between the applicant's qualifications and the job requirements.
    """
    with st.status("Analyzing...", expanded=True) as status:
        comparison_response = None

        st.write("Processing the uploaded resume...")
        for i in range(MAX_RETRY):
            try:
                resume_prompt = resume_prompt_template.format(resume=resume)
                resume_response = get_response(resume_prompt)
                print(resume_response)
                print("---------------------")
                break
            except:
                if i == MAX_RETRY - 1:
                    st.error(
                        f"Failed to process the resume after {MAX_RETRY} tries. Please make sure the uploaded pdf is not a scanned document or try again with another file."
                    )
        st.write("Analyzing the job description...")
        for i in range(MAX_RETRY):
            try:
                job_prompt = job_prompt_template.format(job_description=job_description)
                jd_response = get_response(job_prompt)
                print(jd_response)
                print("---------------------")
                break
            except:
                if i == MAX_RETRY - 1:
                    st.error(
                        f"Failed to process the job description after {MAX_RETRY} tries. Make sure it is English or maybe change it slightly and try again."
                    )
        st.write("Comparing applicants qualifications with the job description...")
        for i in range(MAX_RETRY):
            try:
                comparison_prompt = comparison_prompt_template.format(
                    jd_json=jd_response,
                    resume_json=resume_response,
                )
                print(comparison_prompt)
                comparison_response = get_response(comparison_prompt)
                print(comparison_response)
                print("---------------------")
                break
            except:
                if i == MAX_RETRY - 1:
                    st.error(
                        f"Failed to compare the documents after {MAX_RETRY} tries. Please make some changes to the inputs and try again."
                    )
            status.update(label="Analysis complete!", state="complete", expanded=False)
        return comparison_response


def process_button_clicked(resume, job_description):
    if not resume or len(job_description) < 300:
        st.error(
            "Please ensure a resume is uploaded and the job description is at least 300 characters long."
        )
    else:
        return analysis(resume, job_description)


def main():
    st.title("Recruiter Assistant!")
    st.markdown(
        "This ⚠️ **demo** ⚠️ app will help you find the best candidates for your job description!"
    )
    st.write(
        "Simply enter the job description below, upload the resume you have on hand, and get a quick rating and recommendation!"
    )

    job_description = st.text_area(
        label="Job Description",
        key="job_description",
        placeholder="The job description must be at least 300 characters. Please include the job title.",
        on_change=check_length,
        height=320,
    )

    uploaded_resume = st.file_uploader(
        "Upload the resume in PDF format.", accept_multiple_files=False, type="pdf"
    )

    if uploaded_resume:
        bytes_data = uploaded_resume.getvalue()
        resume = ""
        with pdfplumber.open(io.BytesIO(bytes_data)) as pdf:
            if len(pdf.pages) < 2:
                resume = pdf.pages[0].extract_text()
            else:
                for i in range(2):
                    resume += "\n" + pdf.pages[i].extract_text()

    clicked = st.button(label="Process", type="primary")
    results = None
    if clicked:
        results = process_button_clicked(resume, job_description)

        if results:
            results = json.loads(results)
            if results["is_arian_naseh"] in (True, "True", "true"):
                st.markdown(
                    "#### Well, of course, I'd recommend Arian!!🤩🌟 \n#### He built this tool you're using!!🤓"
                )
                st.markdown(
                    "#### But since we are professionals, here is our regular analysis:"
                )

            st_star_rating(
                label="Match Rating",
                maxValue=5,
                defaultValue=results["score"],
                key="match_rating",
                read_only=True,
            )
            st.markdown(f"#### Our recommendation: \n {results['label']}")
            st.markdown(f"#### What we noted: \n {results['notes']}")


if __name__ == "__main__":
    main()